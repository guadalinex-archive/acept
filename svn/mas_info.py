#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
#
# Fichero:	mas_info.py
# Copyright:	Junta de Andalucía <devmaster@guadalinex.org>
# Autor:	Maria Dolores Pérez Gutiérrez y Néstor Chacón Manzano
# Fecha:	lun mar 27 17:01:30 CET 2006
# Licencia:	GPL v.2
#
# generated by wxGlade 0.3.5.1 on Fri Mar 17 11:11:59 2006
#
# Ventana muestra informacion detalla en la entrada de sesion de un usuario
# al sistema monitorizado por ACEPT

from sys import argv
from watcherMods import *
import wx, wx.grid


# internacionalizacion
wx.Locale_AddCatalogLookupPathPrefix("/etc/acept/watcherCat/lang")
locale = wx.Locale(wx.LANGUAGE_DEFAULT)
a=locale.AddCatalog("masinfo")
_=wx.GetTranslation

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
        self.label_2 = wx.StaticText(self, -1, _("Horarios"))
        self.grid_1 = wx.grid.Grid(self.notebook_1_pane_1, -1, size=(1, 1))
        self.grid_2 = wx.grid.Grid(self.notebook_1_pane_2, -1, size=(1, 1))
        self.grid_3 = wx.grid.Grid(self.notebook_1_pane_3, -1, size=(1, 1))
        self.button_1 = wx.Button(self, -1, _("Aceptar"))

        self.__set_properties()
        self.__do_layout()

	wx.EVT_BUTTON(self, self.button_1.GetId(), self.acepta)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("Informe ACEPT"))
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("/usr/share/acept/pixmaps/fondo_junta.gif", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        
	inic,fin,dias=uso_pc(argv[1])
	if not dias:
	    self.label_2.SetLabel(_("Sin restricciones en el uso del ordenador"))
	else:
	    items=len(dias)
	    for i in range(items):
		a=str(inic[i])
		b=str(fin[i])
	    d=""
	    j=0
	    for i in dias:
		if i =='Mo' :
		    d=d+"\n "+_("Lunes de ")+inic[j][:2]+":"+inic[j][-2:]+" a "+fin[j][:2]+":"+fin[j][-2:]
		elif i =='Tu' :
		    d=d+"\n "+_("Martes de ")+inic[j][:2]+":"+inic[j][-2:]+" a "+fin[j][:2]+":"+fin[j][-2:]
		elif i =='We':
		    d=d+"\n "+_("Miercoles de ")+inic[j][:2]+":"+inic[j][-2:]+" a "+fin[j][:2]+":"+fin[j][-2:]
		elif i =='Th' :
		    d=d+"\n "+_("Jueves de ")+inic[j][:2]+":"+inic[j][-2:]+" a "+fin[j][:2]+":"+fin[j][-2:]
		elif i =='Fr' :
		    d=d+"\n "+_("Viernes de ")+inic[j][:2]+":"+inic[j][-2:]+" a "+fin[j][:2]+":"+fin[j][-2:]
		elif i =='Sa' :
		    d=d+"\n "+_("Sabado de ")+inic[j][:2]+":"+inic[j][-2:]+" a "+fin[j][:2]+":"+fin[j][-2:]
		elif i =='Su' :
		    d=d+"\n "+_("Domingo de ")+inic[j][:2]+":"+inic[j][-2:]+" a "+fin[j][:2]+":"+fin[j][-2:]
		j=j+1
	    
	    if len(d)<=2:
		d=_("Ningun dia")

	    self.label_2.SetLabel(argv[1]+_(", se le permite el uso del ordenador: ")+d)

	self.label_2.SetFont(wx.Font(12, wx.DEFAULT, wx.BOLD, wx.NORMAL, False,""))
	
	self.grid_1.CreateGrid(0, 4)
        self.grid_2.CreateGrid(0, 5)
        self.grid_3.CreateGrid(0, 5)
	attr=wx.grid.GridCellAttr()
	attr2=wx.grid.GridCellAttr()
	attr3=wx.grid.GridCellAttr()
	attr.SetReadOnly(True)
	attr2.SetReadOnly(True)
	attr3.SetReadOnly(True)
	self.grid_1.SetColAttr(0,attr)
	self.grid_1.SetColAttr(1,attr)
	self.grid_1.SetColAttr(2,attr)
	self.grid_1.SetColAttr(3,attr)
	self.grid_2.SetColAttr(0,attr2)
	self.grid_2.SetColAttr(1,attr2)
	self.grid_2.SetColAttr(2,attr2)
	self.grid_2.SetColAttr(3,attr2)
	self.grid_2.SetColAttr(4,attr2)
	self.grid_3.SetColAttr(0,attr3)
	self.grid_3.SetColAttr(1,attr3)
	self.grid_3.SetColAttr(2,attr3)
	self.grid_3.SetColAttr(3,attr3)
	self.grid_3.SetColAttr(4,attr3)
	
	self.grid_1.SetColLabelValue(0, _("Servicio"))
        self.grid_1.SetColLabelValue(1, _("Total Diario"))
        self.grid_1.SetColLabelValue(2, _("Total Semanal"))
        self.grid_1.SetColLabelValue(3, _("Total Mensual"))
	self.grid_1.AutoSize()

	self.grid_2.SetColLabelValue(0, _("Servicio"))
        self.grid_2.SetColLabelValue(1, _("Limite Diario"))
        self.grid_2.SetColLabelValue(2, _("Limite Semanal"))
        self.grid_2.SetColLabelValue(3, _("Limite Mensual"))
        self.grid_2.SetColLabelValue(4, _("Servicio sin limites"))
	self.grid_2.AutoSize()

	self.grid_3.SetColLabelValue(0, _("Servicio"))
        self.grid_3.SetColLabelValue(1, _("Hora"))
        self.grid_3.SetColLabelValue(2, _("Dia"))
        self.grid_3.SetColLabelValue(3, _("Mes"))
        self.grid_3.SetColLabelValue(4, _("Anno"))

	lista_srv=usr_srv(argv[1])
	items=len(lista_srv)
	largo=260+(items*20)
	if largo > 600:
	    largo=600
        self.SetSize((620, largo))
	self.grid_1.AppendRows(items)
	self.grid_2.AppendRows(items)
	self.grid_3.AppendRows(items)
	for i in range(items):
	    self.grid_1.SetCellValue(i,0,lista_srv[i])
	    self.grid_2.SetCellValue(i,0,lista_srv[i])
	    self.grid_3.SetCellValue(i,0,lista_srv[i])

	all=tod_serv(argv[1])
	dic_srv=serv_user(argv[1])
	columnas=self.grid_1.GetNumberRows()
		
	for i in range(columnas):
	    ser=str(self.grid_1.GetCellValue(i,0))
	    if all:
		tiempos=['1']
	    else:
		tiempos=dic_srv.get(argv[1]+"+"+ser)
	    
	    if tiempos[0]=='1':
		self.grid_1.SetCellValue(i,1,"")
		self.grid_1.SetCellValue(i,2,"")
		self.grid_1.SetCellValue(i,3,"")
		self.grid_2.SetCellValue(i,1,"")
		self.grid_2.SetCellValue(i,2,"")
		self.grid_2.SetCellValue(i,3,"")
		self.grid_2.SetCellValue(i,4,_("Si"))
		self.grid_3.SetCellValue(i,1,"")
		self.grid_3.SetCellValue(i,2,"")
		self.grid_3.SetCellValue(i,3,"")
		self.grid_3.SetCellValue(i,4,"")
	    else:
	    	self.grid_2.SetCellValue(i,1,tiempos[0])
		self.grid_2.SetCellValue(i,2,tiempos[1])
		self.grid_2.SetCellValue(i,3,tiempos[2])
		self.grid_2.SetCellValue(i,4,_("No"))
		self.grid_1.SetCellValue(i,1,tiempos[3])
		self.grid_1.SetCellValue(i,2,tiempos[4])
		self.grid_1.SetCellValue(i,3,tiempos[5])
		hora_pr=tiempos[6].split()[0]
		pr=tiempos[6].split()[1].split("/")
		dia_pr=pr[0]
		mes_pr=pr[1]
		anno_pr=pr[2]
		f_act=a=fecha().split()[3:]
		del f_act[1:3]
		if int(dia_pr)+int(mes_pr)+int(anno_pr)>int(f_act[0])+int(f_act[1])+int(f_act[2]):
		    self.grid_3.SetCellValue(i,1,hora_pr)
		    self.grid_3.SetCellValue(i,2,dia_pr)
		    self.grid_3.SetCellValue(i,3,mes_pr)
		    self.grid_3.SetCellValue(i,4,anno_pr)

	self.Centre(wx.BOTH)
	# end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add((20, 20), 0, 0, 0)
        sizer_3.Add((20, 20), 0, 0, 0)
        sizer_4.Add(self.label_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4.Add((20, 20), 0, 0, 0)
        sizer_5.Add(self.grid_1, 1, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetAutoLayout(True)
        self.notebook_1_pane_1.SetSizer(sizer_5)
        sizer_5.Fit(self.notebook_1_pane_1)
        sizer_5.SetSizeHints(self.notebook_1_pane_1)
        sizer_6.Add(self.grid_2, 1, wx.EXPAND, 0)
        self.notebook_1_pane_2.SetAutoLayout(True)
        self.notebook_1_pane_2.SetSizer(sizer_6)
        sizer_6.Fit(self.notebook_1_pane_2)
        sizer_6.SetSizeHints(self.notebook_1_pane_2)
        sizer_7.Add(self.grid_3, 1, wx.EXPAND, 0)
        self.notebook_1_pane_3.SetAutoLayout(True)
        self.notebook_1_pane_3.SetSizer(sizer_7)
        sizer_7.Fit(self.notebook_1_pane_3)
        sizer_7.SetSizeHints(self.notebook_1_pane_3)
        self.notebook_1.AddPage(self.notebook_1_pane_1, _("Consumido"))
        self.notebook_1.AddPage(self.notebook_1_pane_2, _("Limites"))
        self.notebook_1.AddPage(self.notebook_1_pane_3, _("Prorrogas"))
        sizer_4.Add(wx.NotebookSizer(self.notebook_1), 1, wx.EXPAND, 0)
        sizer_4.Add((20, 20), 0, 0, 0)
        sizer_8.Add((20, 20), 1, 0, 0)
        sizer_8.Add(self.button_1, 0, 0, 0)
        sizer_4.Add(sizer_8, 0, wx.EXPAND, 0)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_3.Add((20, 20), 0, 0, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_2.Add((20, 20), 0, 0, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def acepta (self, event):
	self.Close()
# end of class MyFrame


class Inicio_App(wx.App):
    """ Inicializa el entorno Gráfico """
    def OnInit(self):
    	wx.InitAllImageHandlers()
	self.myframe=MyFrame(None,-1,"")
        self.myframe.Show()
        return True

inicio=Inicio_App()
inicio.MainLoop()



