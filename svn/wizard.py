# -*- coding: ISO-8859-1 -*-
#
# Fichero:	wizard.py
# Copyright:	Junta de Andaluc� <devmaster@guadalinex.org>
# Autor:	Maria Dolores P�ez Guti�rez y N�tor Chac� Manzano
# Fecha:	lun mar 27 17:01:38 CET 2006
# Licencia:	GPL v.2
#
# generated by wxGlade 0.3.5.1 on Thu Dec  8 17:24:01 2005
#
# Asistente para la configuracion

from avanzado import *
from func import *
from os.path import isfile
from confSquid import inic_control_web

_=wx.GetTranslation

# Seleccion de un usuario local con una uid mayor o igual a 1001
class MyWizard0(wx.Frame):
    def __init__(self, *args, **kwds):
	# begin wxGlade: MyWizard1.__init__
	# internacionalizacion
	wx.Locale_AddCatalogLookupPathPrefix("/etc/acept/watcherCat/lang")
	locale = wx.Locale(wx.LANGUAGE_DEFAULT)
	trad=locale.AddCatalog("acept")

	# Segun la version de libreria ejecuta una cosa u otra
	try:
		kwds["style"] = wx.SYSTEM_MENU|wx.FRAME_FLOAT_ON_PARENT | wx.MINIMIZE_BOX| wx.MINIMIZE_BOX | wx.CLOSE_BOX 
        except:
		kwds["style"] = wx.SYSTEM_MENU|wx.FRAME_FLOAT_ON_PARENT | wx.MINIMIZE_BOX| wx.MINIMIZE_BOX
	wx.Frame.__init__(self, *args, **kwds)
	self.label_1 = wx.StaticText(self, -1, " "+_("Que usuario desea configurar "))
	self.combo_box_1 = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
	self.button_1 = wx.lib.buttons.GenBitmapTextButton(self, -1, wx.Bitmap("/usr/share/acept/pixmaps/arrow-right.png", wx.BITMAP_TYPE_ANY),label=_("Siguiente")+" ")
	self.padre=self.GetParent()
	self.lista_usr()

	self.__set_properties()
	self.__do_layout()

	wx.EVT_BUTTON(self,self.button_1.GetId(),self.siguiente)
	wx.EVT_CLOSE(self,self.cierra)
	# end wxGlade

    def __set_properties(self):
	# begin wxGlade: MyWizard1.__set_properties
	self.SetTitle(_("Asistente 1/5"))
	_icon = wx.EmptyIcon()
	_icon.CopyFromBitmap(wx.Bitmap("/usr/share/acept/pixmaps/fondo_junta.gif", wx.BITMAP_TYPE_ANY))
	self.label_1.SetFont(wx.Font(18, wx.DEFAULT, wx.BOLD, wx.NORMAL, False,""))
	self.SetIcon(_icon)
	self.combo_box_1.SetSelection(-1)
	self.CentreOnScreen
	# end wxGlade

    def __do_layout(self):
	# begin wxGlade: MyWizard1.__do_layout
	sizer_1 = wx.BoxSizer(wx.VERTICAL)
	sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_3 = wx.BoxSizer(wx.VERTICAL)
	sizer_4 = wx.BoxSizer(wx.VERTICAL)
	sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_2.Add((20, 20), 0, 0, 0)
	sizer_3.Add((20, 20), 0, 0, 0)
	sizer_4.Add(self.label_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
	sizer_4.Add((20, 20), 0, 0, 0)
	sizer_4.Add(self.combo_box_1, 0, wx.EXPAND, 0)
	sizer_4.Add((20, 20), 0, 0, 0)
	sizer_5.Add((20, 20), 1, 0, 0)
	sizer_5.Add(self.button_1, 0, 0, 0)
	sizer_4.Add(sizer_5, 0, wx.EXPAND, 0)
	sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
	sizer_3.Add((20, 20), 0, 0, 0)
	sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
	sizer_2.Add((20, 20), 0, 0, 0)
	sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
	self.SetAutoLayout(True)
	self.SetSizer(sizer_1)
	sizer_1.Fit(self)
	sizer_1.SetSizeHints(self)
	self.Layout()
	# end wxGlade

    def cierra(self,event):
	from os import system
	self.padre.Show()
	self.Destroy()

    def siguiente(self,event):
	self.Hide()
	asistente2=MyWizard1(self, -1, "")
	asistente2.Show()

    def lista_usr(self):
	for i in lista_usuarios(1001):
		self.combo_box_1.Append(i)
# end of class MyWizard0

# Configuracion de los horarios de uso del ordenador
class MyWizard1(wx.Frame):
    def __init__(self, *args, **kwds):
	# begin wxGlade: MyWizard.__init__
	# Ejecuta una cosa u otra segun la version de libreria
	try:
		kwds["style"] = wx.SYSTEM_MENU|wx.FRAME_FLOAT_ON_PARENT | wx.MINIMIZE_BOX | wx.CLOSE_BOX 
        except:
		kwds["style"] = wx.SYSTEM_MENU|wx.FRAME_FLOAT_ON_PARENT | wx.MINIMIZE_BOX 
	wx.Frame.__init__(self, *args, **kwds)
	self.label_1 = wx.StaticText(self, -1, _("Cuando desea que el usuario pueda usar el equipo ?"))
	self.label_2 = wx.StaticText(self, -1, _("Dias"))
	self.label_3 = wx.StaticText(self, -1, _("Permitir ?"))
	self.label_40 = wx.StaticText(self, -1, _("Intervalo"))
	self.static_line_1 = wx.StaticLine(self, -1)
	self.label_4 = wx.StaticText(self, -1, _("Lunes"))
	self.checkbox_1 = wx.CheckBox(self, -1, "")
	self.label_5 = wx.StaticText(self, -1, _("de "))
	self.spin_ctrl_1 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_6 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_2 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_7 = wx.StaticText(self, -1, _(" a "))
	self.spin_ctrl_3 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_8 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_4 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_4_copy_1 = wx.StaticText(self, -1, _("Martes"))
	self.checkbox_1_copy = wx.CheckBox(self, -1, "")
	self.label_5_copy = wx.StaticText(self, -1, _("de "))
	self.spin_ctrl_1_copy = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_6_copy = wx.StaticText(self, -1, ":")
	self.spin_ctrl_2_copy = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_7_copy = wx.StaticText(self, -1, _(" a "))
	self.spin_ctrl_3_copy = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_8_copy = wx.StaticText(self, -1, ":")
	self.spin_ctrl_4_copy = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_4_copy_2 = wx.StaticText(self, -1, _("Miercoles"))
	self.checkbox_1_copy_1 = wx.CheckBox(self, -1, "")
	self.label_5_copy_1 = wx.StaticText(self, -1, _("de "))
	self.spin_ctrl_1_copy_1 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_6_copy_1 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_2_copy_1 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_7_copy_1 = wx.StaticText(self, -1, _(" a "))
	self.spin_ctrl_3_copy_1 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_8_copy_1 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_4_copy_1 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_4_copy_3 = wx.StaticText(self, -1, _("Jueves"))
	self.checkbox_1_copy_2 = wx.CheckBox(self, -1, "")
	self.label_5_copy_2 = wx.StaticText(self, -1, _("de "))
	self.spin_ctrl_1_copy_2 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_6_copy_2 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_2_copy_2 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_7_copy_2 = wx.StaticText(self, -1, _(" a "))
	self.spin_ctrl_3_copy_2 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_8_copy_2 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_4_copy_2 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_4_copy_4 = wx.StaticText(self, -1, _("Viernes"))
	self.checkbox_1_copy_3 = wx.CheckBox(self, -1, "")
	self.label_5_copy_3 = wx.StaticText(self, -1, _("de "))
	self.spin_ctrl_1_copy_3 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_6_copy_3 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_2_copy_3 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_7_copy_3 = wx.StaticText(self, -1, _(" a "))
	self.spin_ctrl_3_copy_3 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_8_copy_3 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_4_copy_3 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_4_copy_5 = wx.StaticText(self, -1, _("Sabado"))
	self.checkbox_1_copy_4 = wx.CheckBox(self, -1, "")
	self.label_5_copy_4 = wx.StaticText(self, -1, _("de "))
	self.spin_ctrl_1_copy_4 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_6_copy_4 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_2_copy_4 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_7_copy_4 = wx.StaticText(self, -1, _(" a "))
	self.spin_ctrl_3_copy_4 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_8_copy_4 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_4_copy_4 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_4_copy_6 = wx.StaticText(self, -1, _("Domingo"))
	self.checkbox_1_copy_5 = wx.CheckBox(self, -1, "")
	self.label_5_copy_5 = wx.StaticText(self, -1, _("de "))
	self.spin_ctrl_1_copy_5 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_6_copy_5 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_2_copy_5 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))
	self.label_7_copy_5 = wx.StaticText(self, -1, _(" a "))
	self.spin_ctrl_3_copy_5 = wx.SpinCtrl(self, -1, "", min=0, max=23, size=(45,20))
	self.label_8_copy_5 = wx.StaticText(self, -1, ":")
	self.spin_ctrl_4_copy_5 = wx.SpinCtrl(self, -1, "", min=0, max=59, size=(45,20))

	self.button_1 = wx.lib.buttons.GenBitmapTextButton(self, -1, wx.Bitmap("/usr/share/acept/pixmaps/arrow-left.png", wx.BITMAP_TYPE_ANY),label=_("Anterior")+" ")
	self.button_2 = wx.lib.buttons.GenBitmapTextButton(self, -1, wx.Bitmap("/usr/share/acept/pixmaps/arrow-right.png", wx.BITMAP_TYPE_ANY),label=_("Siguiente")+" ")
	self.padre=self.GetParent()
	self.__set_properties()
	self.__do_layout()
	wx.EVT_CLOSE(self,self.cierra)
	wx.EVT_BUTTON(self,self.button_1.GetId(),self.anterior)
	wx.EVT_BUTTON(self,self.button_2.GetId(),self.siguiente)
	wx.EVT_CHECKBOX(self,self.checkbox_1.GetId(),self.estado)
	wx.EVT_CHECKBOX(self,self.checkbox_1_copy.GetId(),self.estado)
	wx.EVT_CHECKBOX(self,self.checkbox_1_copy_1.GetId(),self.estado)
	wx.EVT_CHECKBOX(self,self.checkbox_1_copy_2.GetId(),self.estado)
	wx.EVT_CHECKBOX(self,self.checkbox_1_copy_3.GetId(),self.estado)
	wx.EVT_CHECKBOX(self,self.checkbox_1_copy_4.GetId(),self.estado)
	wx.EVT_CHECKBOX(self,self.checkbox_1_copy_5.GetId(),self.estado)
	# end wxGlade

    def __set_properties(self):
	# begin wxGlade: MyWizard.__set_properties
	self.SetTitle(_("Asistente 2/5"))
	_icon = wx.EmptyIcon()
	_icon.CopyFromBitmap(wx.Bitmap("/usr/share/acept/pixmaps/fondo_junta.gif", wx.BITMAP_TYPE_ANY))
	self.SetIcon(_icon)
	self.label_1.SetFont(wx.Font(18, wx.DEFAULT, wx.BOLD, wx.NORMAL, False,""))
	self.activar(False,False,False,False,False,False,False)
	self.CentreOnScreen()
	# end wxGlade

    def __do_layout(self):
	# begin wxGlade: MyWizard.__do_layout
	sizer_1 = wx.BoxSizer(wx.VERTICAL)
	sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_3 = wx.BoxSizer(wx.VERTICAL)
	sizer_4 = wx.BoxSizer(wx.VERTICAL)
	sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_9 = wx.BoxSizer(wx.VERTICAL)
	sizer_11_copy_copy_1_copy_6 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_11_copy_copy_1_copy_5 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_11_copy_copy_1_copy_4 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_11_copy_copy_1_copy_3 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_11_copy_copy_1_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_11_copy_copy_1_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_11_copy_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_11_copy_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
	sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_2.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_3.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_12.Add(self.label_1, 1, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
	sizer_12.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_4.Add(sizer_12, 0, 0, 0)
	sizer_4.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add(self.label_2, 1, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add(self.label_3, 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 0, wx.ALL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((10, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add(self.label_40, 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(sizer_11_copy_copy_1_copy, 1, wx.EXPAND, 0)
	sizer_9.Add(self.static_line_1, 0, wx.EXPAND, 0)
	sizer_11_copy_copy_1.Add(self.label_4, 1, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add(self.checkbox_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add((10, 20), 1, wx.ALL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add(self.label_5, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add(self.spin_ctrl_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add(self.label_6, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add(self.spin_ctrl_2, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add((10, 20), 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add(self.label_7, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add((10, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add(self.spin_ctrl_3, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add(self.label_8, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add(self.spin_ctrl_4, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(sizer_11_copy_copy_1, 1, wx.EXPAND, 0)
	sizer_11_copy_copy_1_copy_1.Add(self.label_4_copy_1, 1, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add(self.checkbox_1_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add((10, 20), 1, wx.ALL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add(self.label_5_copy, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add(self.spin_ctrl_1_copy, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add(self.label_6_copy, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add(self.spin_ctrl_2_copy, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add((10, 20), 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add(self.label_7_copy, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add((10, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add(self.spin_ctrl_3_copy, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add(self.label_8_copy, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add(self.spin_ctrl_4_copy, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_1.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(sizer_11_copy_copy_1_copy_1, 1, wx.EXPAND, 0)
	sizer_11_copy_copy_1_copy_2.Add(self.label_4_copy_2, 1, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add(self.checkbox_1_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add((10, 20), 1, wx.ALL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add(self.label_5_copy_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add(self.spin_ctrl_1_copy_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add(self.label_6_copy_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add(self.spin_ctrl_2_copy_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add((10, 20), 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add(self.label_7_copy_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add((10, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add(self.spin_ctrl_3_copy_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add(self.label_8_copy_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add(self.spin_ctrl_4_copy_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_2.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(sizer_11_copy_copy_1_copy_2, 1, wx.EXPAND, 0)
	sizer_11_copy_copy_1_copy_3.Add(self.label_4_copy_3, 1, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add(self.checkbox_1_copy_2, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add((10, 20), 1, wx.ALL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add(self.label_5_copy_2, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add(self.spin_ctrl_1_copy_2, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add(self.label_6_copy_2, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add(self.spin_ctrl_2_copy_2, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add((10, 20), 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add(self.label_7_copy_2, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add((10, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add(self.spin_ctrl_3_copy_2, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add(self.label_8_copy_2, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add(self.spin_ctrl_4_copy_2, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_3.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(sizer_11_copy_copy_1_copy_3, 1, wx.EXPAND, 0)
	sizer_11_copy_copy_1_copy_4.Add(self.label_4_copy_4, 1, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add(self.checkbox_1_copy_3, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add((10, 20), 1, wx.ALL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add(self.label_5_copy_3, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add(self.spin_ctrl_1_copy_3, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add(self.label_6_copy_3, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add(self.spin_ctrl_2_copy_3, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add((10, 20), 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add(self.label_7_copy_3, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add((10, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add(self.spin_ctrl_3_copy_3, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add(self.label_8_copy_3, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add(self.spin_ctrl_4_copy_3, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_4.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(sizer_11_copy_copy_1_copy_4, 1, wx.EXPAND, 0)
	sizer_11_copy_copy_1_copy_5.Add(self.label_4_copy_5, 1, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add(self.checkbox_1_copy_4, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add((10, 20), 1, wx.ALL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add(self.label_5_copy_4, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add(self.spin_ctrl_1_copy_4, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add(self.label_6_copy_4, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add(self.spin_ctrl_2_copy_4, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add((10, 20), 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add(self.label_7_copy_4, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add((10, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add(self.spin_ctrl_3_copy_4, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add(self.label_8_copy_4, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add(self.spin_ctrl_4_copy_4, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_5.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(sizer_11_copy_copy_1_copy_5, 1, wx.EXPAND, 0)
	sizer_11_copy_copy_1_copy_6.Add(self.label_4_copy_6, 1, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add(self.checkbox_1_copy_5, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add((10, 20), 1, wx.ALL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add(self.label_5_copy_5, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add(self.spin_ctrl_1_copy_5, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add(self.label_6_copy_5, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add(self.spin_ctrl_2_copy_5, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add((10, 20), 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add(self.label_7_copy_5, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add((10, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add(self.spin_ctrl_3_copy_5, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add(self.label_8_copy_5, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add(self.spin_ctrl_4_copy_5, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_11_copy_copy_1_copy_6.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(sizer_11_copy_copy_1_copy_6, 1, wx.EXPAND, 0)
	sizer_9.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_4.Add(sizer_9, 1, wx.EXPAND, 0)
	sizer_8.Add(self.button_1, 0, wx.ADJUST_MINSIZE, 0)
	sizer_8.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_8.Add(self.button_2, 0, wx.ADJUST_MINSIZE, 0)
	sizer_8.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_4.Add(sizer_8, 0, wx.EXPAND, 0)
	sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
	sizer_3.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
	sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
	self.SetAutoLayout(True)
	self.SetSizer(sizer_1)
	sizer_1.Fit(self)
	sizer_1.SetSizeHints(self)
	self.Layout()
	# end wxGlade
    def activar(self,a,b,c,d,e,f,g):

	self.spin_ctrl_1.Enable(a)
	self.spin_ctrl_2.Enable(a)
	self.spin_ctrl_3.Enable(a)
	self.spin_ctrl_4.Enable(a)

	self.spin_ctrl_1_copy.Enable(b)
	self.spin_ctrl_2_copy.Enable(b)
	self.spin_ctrl_3_copy.Enable(b)
	self.spin_ctrl_4_copy.Enable(b)

	self.spin_ctrl_1_copy_1.Enable(c)
	self.spin_ctrl_2_copy_1.Enable(c)
	self.spin_ctrl_3_copy_1.Enable(c)
	self.spin_ctrl_4_copy_1.Enable(c)

	self.spin_ctrl_1_copy_2.Enable(d)
	self.spin_ctrl_2_copy_2.Enable(d)
	self.spin_ctrl_3_copy_2.Enable(d)
	self.spin_ctrl_4_copy_2.Enable(d)

	self.spin_ctrl_1_copy_3.Enable(e)
	self.spin_ctrl_2_copy_3.Enable(e)
	self.spin_ctrl_3_copy_3.Enable(e)
	self.spin_ctrl_4_copy_3.Enable(e)

	self.spin_ctrl_1_copy_4.Enable(f)
	self.spin_ctrl_2_copy_4.Enable(f)
	self.spin_ctrl_3_copy_4.Enable(f)
	self.spin_ctrl_4_copy_4.Enable(f)

	self.spin_ctrl_1_copy_5.Enable(g)
	self.spin_ctrl_2_copy_5.Enable(g)
	self.spin_ctrl_3_copy_5.Enable(g)
	self.spin_ctrl_4_copy_5.Enable(g)

    def estado(self,event):
	id=event.GetId()
	rango=self.checkbox_1.GetValue()
	rango_copy=self.checkbox_1_copy.GetValue()
	rango_copy_1=self.checkbox_1_copy_1.GetValue()
	rango_copy_2=self.checkbox_1_copy_2.GetValue()
	rango_copy_3=self.checkbox_1_copy_3.GetValue()
	rango_copy_4=self.checkbox_1_copy_4.GetValue()
	rango_copy_5=self.checkbox_1_copy_5.GetValue()

	if id==self.checkbox_1.GetId():
		self.spin_ctrl_1.SetValue(0)
		self.spin_ctrl_2.SetValue(0)
		self.spin_ctrl_3.SetValue(23)
		self.spin_ctrl_4.SetValue(59)
	elif id==self.checkbox_1_copy.GetId():
		self.spin_ctrl_1_copy.SetValue(0)
		self.spin_ctrl_2_copy.SetValue(0)
		self.spin_ctrl_3_copy.SetValue(23)
		self.spin_ctrl_4_copy.SetValue(59)
	elif id==self.checkbox_1_copy_1.GetId():
		self.spin_ctrl_1_copy_1.SetValue(0)
		self.spin_ctrl_2_copy_1.SetValue(0)
		self.spin_ctrl_3_copy_1.SetValue(23)
		self.spin_ctrl_4_copy_1.SetValue(59)
	elif id==self.checkbox_1_copy_2.GetId():
		self.spin_ctrl_1_copy_2.SetValue(0)
		self.spin_ctrl_2_copy_2.SetValue(0)
		self.spin_ctrl_3_copy_2.SetValue(23)
		self.spin_ctrl_4_copy_2.SetValue(59)
	elif id==self.checkbox_1_copy_3.GetId():
		self.spin_ctrl_1_copy_3.SetValue(0)
		self.spin_ctrl_2_copy_3.SetValue(0)
		self.spin_ctrl_3_copy_3.SetValue(23)
		self.spin_ctrl_4_copy_3.SetValue(59)
	elif id==self.checkbox_1_copy_4.GetId():
		self.spin_ctrl_1_copy_4.SetValue(0)
		self.spin_ctrl_2_copy_4.SetValue(0)
		self.spin_ctrl_3_copy_4.SetValue(23)
		self.spin_ctrl_4_copy_4.SetValue(59)
	elif id==self.checkbox_1_copy_5.GetId():
		self.spin_ctrl_1_copy_5.SetValue(0)
		self.spin_ctrl_2_copy_5.SetValue(0)
		self.spin_ctrl_3_copy_5.SetValue(23)
		self.spin_ctrl_4_copy_5.SetValue(59)

	self.activar(rango,rango_copy,rango_copy_1,rango_copy_2,rango_copy_3,rango_copy_4,rango_copy_5)

    def cierra(self,event):
	from os import system
	self.abuelo=self.padre.GetParent()
	self.abuelo.Show()
	self.padre.Destroy()

    def siguiente(self,event):
	self.Hide()
	asistente3=MyWizard2(self, -1, "")
	asistente3.Show()

    def anterior(self,event):
	self.padre.Show()
	self.Destroy()
# end of class MyWizard1

# Configuraci� global para restringir el uso de servicios de internet
class MyWizard2(wx.Frame):
    def __init__(self, *args, **kwds):
	# begin wxGlade: MyWizard2.__init__
	try:
		kwds["style"] = wx.SYSTEM_MENU|wx.FRAME_FLOAT_ON_PARENT| wx.MINIMIZE_BOX | wx.CLOSE_BOX 
	except:
		kwds["style"] = wx.SYSTEM_MENU|wx.FRAME_FLOAT_ON_PARENT| wx.MINIMIZE_BOX 
	wx.Frame.__init__(self, *args, **kwds)
	self.panel_1 = wx.Panel(self, -1)
	self.label_1 = wx.StaticText(self, -1, _("Desea limitar el tiempo de uso de internet ?"))
	self.choice_1 = wx.Choice(self, -1, choices=[_("No, me basta con las restricciones al uso del ordenador."), _("Si, deseo establecer un limite de horas diario, semanal y mensual")])
	self.label_2 = wx.StaticText(self.panel_1, -1, _("Limite diario"))
	self.spin_ctrl_1 = wx.SpinCtrl(self.panel_1, -1, "", min=0, max=23)
	self.label_3 = wx.StaticText(self.panel_1, -1, _("horas"))
	self.spin_ctrl_2 = wx.SpinCtrl(self.panel_1, -1, "", min=0, max=59)
	self.label_4 = wx.StaticText(self.panel_1, -1, _("minutos"))
	self.label_5 = wx.StaticText(self.panel_1, -1, _("Limite semanal"))
	self.spin_ctrl_3 = wx.SpinCtrl(self.panel_1, -1, "", min=0, max=167)
	self.label_6 = wx.StaticText(self.panel_1, -1, _("horas"))
	self.spin_ctrl_4 = wx.SpinCtrl(self.panel_1, -1, "", min=0, max=59)
	self.label_7 = wx.StaticText(self.panel_1, -1, _("minutos"))
	self.label_8 = wx.StaticText(self.panel_1, -1, _("Limite mensual"))
	self.spin_ctrl_5 = wx.SpinCtrl(self.panel_1, -1, "", min=0, max=743)
	self.label_9 = wx.StaticText(self.panel_1, -1, _("horas"))
	self.spin_ctrl_6 = wx.SpinCtrl(self.panel_1, -1, "", min=0, max=59)
	self.label_10 = wx.StaticText(self.panel_1, -1, _("minutos"))
	self.button_1 = wx.lib.buttons.GenBitmapTextButton(self, -1, wx.Bitmap("/usr/share/acept/pixmaps/arrow-left.png", wx.BITMAP_TYPE_ANY),label=_("Anterior")+" ")
	self.button_2 = wx.lib.buttons.GenBitmapTextButton(self, -1, wx.Bitmap("/usr/share/acept/pixmaps/arrow-right.png", wx.BITMAP_TYPE_ANY),label=_("Siguiente")+" ")
	self.abuelo=self.GetGrandParent()
	self.padre=self.GetParent()

	self.__set_properties()
	self.__do_layout()

	wx.EVT_CHOICE(self,self.choice_1.GetId(),self.select)	
	wx.EVT_CLOSE(self,self.cierra)
	wx.EVT_BUTTON(self,self.button_1.GetId(),self.anterior)
	wx.EVT_BUTTON(self,self.button_2.GetId(),self.siguiente)
	wx.EVT_SPINCTRL(self,self.spin_ctrl_1.GetId(),self.actualiza_valor)
	wx.EVT_SPINCTRL(self,self.spin_ctrl_2.GetId(),self.actualiza_valor)
	wx.EVT_SPINCTRL(self,self.spin_ctrl_3.GetId(),self.actualiza_valor)
	wx.EVT_SPINCTRL(self,self.spin_ctrl_4.GetId(),self.actualiza_valor)
	wx.EVT_SPINCTRL(self,self.spin_ctrl_5.GetId(),self.actualiza_valor)
	wx.EVT_SPINCTRL(self,self.spin_ctrl_6.GetId(),self.actualiza_valor)
	# end wxGlade

    def __set_properties(self):
	# begin wxGlade: MyWizard2.__set_properties
	self.SetTitle(_("Asistente 3/5"))
	_icon = wx.EmptyIcon()
	_icon.CopyFromBitmap(wx.Bitmap("/usr/share/acept/pixmaps/fondo_junta.gif", wx.BITMAP_TYPE_ANY))
	self.SetIcon(_icon)
	self.choice_1.SetSelection(0)
	self.label_1.SetFont(wx.Font(18, wx.DEFAULT, wx.BOLD, wx.NORMAL, False,""))
	self.spin_ctrl_1.SetSize((45, 15))
	self.spin_ctrl_2.SetSize((45, 15))
	self.spin_ctrl_3.SetSize((45, 15))
	self.spin_ctrl_4.SetSize((45, 15))
	self.spin_ctrl_5.SetSize((45, 15))
	self.spin_ctrl_6.SetSize((45, 15))
	self.panel_1.Enable(False)
	self.CentreOnScreen
	# end wxGlade

    def __do_layout(self):
	# begin wxGlade: MyWizard2.__do_layout
	sizer_1 = wx.BoxSizer(wx.VERTICAL)
	sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_3 = wx.BoxSizer(wx.VERTICAL)
	sizer_4 = wx.BoxSizer(wx.VERTICAL)
	sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_6 = wx.BoxSizer(wx.VERTICAL)
	sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_2.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_3.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_4.Add(self.label_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
	sizer_4.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_4.Add(self.choice_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
	sizer_4.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_7.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_7.Add(self.label_2, 1, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_7.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_7.Add(self.spin_ctrl_1, 0, wx.ADJUST_MINSIZE, 0)
	sizer_7.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_7.Add(self.label_3, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_7.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_7.Add(self.spin_ctrl_2, 0, wx.ADJUST_MINSIZE, 0)
	sizer_7.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_7.Add(self.label_4, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_7.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_6.Add(sizer_7, 0, wx.EXPAND, 0)
	sizer_6.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_8.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_8.Add(self.label_5, 1, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_8.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_8.Add(self.spin_ctrl_3, 0, wx.ADJUST_MINSIZE, 0)
	sizer_8.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_8.Add(self.label_6, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_8.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_8.Add(self.spin_ctrl_4, 0, wx.ADJUST_MINSIZE, 0)
	sizer_8.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_8.Add(self.label_7, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_8.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_6.Add(sizer_8, 1, wx.EXPAND, 0)
	sizer_6.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(self.label_8, 1, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_9.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(self.spin_ctrl_5, 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(self.label_9, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_9.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(self.spin_ctrl_6, 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_9.Add(self.label_10, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
	sizer_9.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_6.Add(sizer_9, 1, wx.EXPAND, 0)
	self.panel_1.SetAutoLayout(True)
	self.panel_1.SetSizer(sizer_6)
	sizer_6.Fit(self.panel_1)
	sizer_6.SetSizeHints(self.panel_1)
	sizer_4.Add(self.panel_1, 1, wx.EXPAND, 0)
	sizer_4.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_5.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_5.Add(self.button_1, 0, wx.ADJUST_MINSIZE, 0)
	sizer_5.Add((20, 20), 1, wx.ADJUST_MINSIZE, 0)
	sizer_5.Add(self.button_2, 0, wx.ADJUST_MINSIZE, 0)
	sizer_5.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_4.Add(sizer_5, 0, wx.EXPAND, 0)
	sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
	sizer_3.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
	sizer_2.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
	sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
	self.SetAutoLayout(True)
	self.SetSizer(sizer_1)
	sizer_1.Fit(self)
	sizer_1.SetSizeHints(self)
	self.Layout()
	# end wxGlade

    def cierra(self,event):
	from os import system
	self.inicio=self.abuelo.GetParent()
	self.inicio.Show()
	self.abuelo.Destroy()

    def siguiente(self,event):
	self.Hide()
	asistente4=MyWizard3(self, -1, "")
	asistente4.Show()

    def anterior(self,event):
	self.padre.Show()
	self.Destroy()


    def select (self, event):
	eleccion=self.choice_1.GetStringSelection()
	if eleccion==_("Si, deseo establecer un limite de horas diario, semanal y mensual"):
		msg_dlg=_("El tiempo que se contabiliza no es el tiempo que permanece abierto el navegador, si no el tiempo que dura la conexion al servidor web.")
		dlg=wx.MessageDialog(self, msg_dlg, _('Aviso ACEPT'), wx.OK | wx.ICON_INFORMATION)
		_icon = wx.EmptyIcon()
		_icon.CopyFromBitmap(wx.Bitmap("/usr/share/acept/pixmaps/aviso.png",wx.BITMAP_TYPE_ANY))
		dlg.SetIcon(_icon)
		dlg.ShowModal()
		dlg.Destroy() 
		self.panel_1.Enable(True)
	else:
		self.panel_1.Enable(False)

    def actualiza_valor(self,event):
	dh=self.spin_ctrl_1.GetValue()
	dm=self.spin_ctrl_2.GetValue()
	sh=self.spin_ctrl_3.GetValue()
	sm=self.spin_ctrl_4.GetValue()
	mh=self.spin_ctrl_5.GetValue()
	mm=self.spin_ctrl_6.GetValue()

	if dh>sh:
		self.spin_ctrl_3.SetValue(dh)
	if dh>mh:
		self.spin_ctrl_5.SetValue(dh)
	if sh>mh:
		self.spin_ctrl_5.SetValue(sh)
	if dh==sh and dm>sm:
		self.spin_ctrl_4.SetValue(dm) 
	if dh==mh and dm>mm:
		self.spin_ctrl_6.SetValue(dm)
	if sh==mh and sm>mm:
		self.spin_ctrl_6.SetValue(sm)
# end of class MyWizard2

# Configuracion de los filtros de contenidos que se van a aplicar a un usuario
class MyWizard3(wx.Frame):
    def __init__(self, *args, **kwds):
	# begin wxGlade: MyWizard3.__init__
	try:
		kwds["style"] = wx.SYSTEM_MENU|wx.FRAME_FLOAT_ON_PARENT| wx.MINIMIZE_BOX | wx.CLOSE_BOX 
        except:
		kwds["style"] = wx.SYSTEM_MENU|wx.FRAME_FLOAT_ON_PARENT| wx.MINIMIZE_BOX  
	wx.Frame.__init__(self, *args, **kwds)
	self.label_1 = wx.StaticText(self, -1, _("Seleccione los contenidos que desea denegar"))
	self.button_1 = wx.Button(self, -1, _("Todos"))
	self.button_2 = wx.Button(self, -1, _("Ninguno"))
	self.static_line_2 = wx.StaticLine(self, -1)
	self.checkbox_1 = wx.CheckBox(self, -1, _("Violentos"))
	self.checkbox_3 = wx.CheckBox(self, -1, _("Sexuales"))
	self.checkbox_4 = wx.CheckBox(self, -1, _("Drogas"))
	self.checkbox_6 = wx.CheckBox(self, -1, _("Correo-web"))
	self.checkbox_7 = wx.CheckBox(self, -1, _("Apuestas"))
	self.checkbox_8 = wx.CheckBox(self, -1, _("Hacking"))
	self.button_3 = wx.lib.buttons.GenBitmapTextButton(self, -1, wx.Bitmap("/usr/share/acept/pixmaps/arrow-left.png", wx.BITMAP_TYPE_ANY),label=_("Anterior")+" ")
	self.button_4 = wx.lib.buttons.GenBitmapTextButton(self, -1, wx.Bitmap("/usr/share/acept/pixmaps/arrow-right.png", wx.BITMAP_TYPE_ANY),label=_("Siguiente")+" ")
	self.padre=self.GetParent()
	self.bisabuelo=self.GetGrandParent()
	self.bisabuelo=self.bisabuelo.GetParent()
	self.__set_properties()
	self.__do_layout()
	wx.EVT_CLOSE(self,self.cierra)
	wx.EVT_BUTTON(self,self.button_1.GetId(),self.todos)
	wx.EVT_BUTTON(self,self.button_2.GetId(),self.ninguno)
	wx.EVT_BUTTON(self,self.button_3.GetId(),self.anterior)
	wx.EVT_BUTTON(self,self.button_4.GetId(),self.siguiente)
	# end wxGlade

    def __set_properties(self):
	# begin wxGlade: MyWizard3.__set_properties
	if not self.validar("Violentos"):
		self.checkbox_1.Disable()
	if not self.validar("Sexuales"):
		self.checkbox_3.Disable()
	if not self.validar("Drogas"):
		self.checkbox_4.Disable()
	if not self.validar("Correo-web"):
		self.checkbox_6.Disable()
	if not self.validar("Apuestas"):
		self.checkbox_7.Disable()
	if not self.validar("Hacking"):
		self.checkbox_8.Disable()
	self.SetTitle(_("Asistente 4/5"))
	_icon = wx.EmptyIcon()
	_icon.CopyFromBitmap(wx.Bitmap("/usr/share/acept/pixmaps/fondo_junta.gif", wx.BITMAP_TYPE_ANY))
	self.SetIcon(_icon)
	self.label_1.SetFont(wx.Font(18, wx.DEFAULT, wx.BOLD, wx.NORMAL, False,""))
	# end wxGlade

    def __do_layout(self):
	# begin wxGlade: MyWizard3.__do_layout
	sizer_1 = wx.BoxSizer(wx.VERTICAL)
	sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_3 = wx.BoxSizer(wx.VERTICAL)
	sizer_4 = wx.BoxSizer(wx.VERTICAL)
	sizer_10 = wx.BoxSizer(wx.VERTICAL)
	sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_9 = wx.BoxSizer(wx.VERTICAL)
	sizer_8 = wx.BoxSizer(wx.VERTICAL)
	sizer_7 = wx.BoxSizer(wx.VERTICAL)
	sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_2.Add((20, 20), 0, 0, 0)
	sizer_3.Add((20, 20), 0, 0, 0)
	sizer_4.Add(self.label_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
	sizer_4.Add((20, 20), 0, 0, 0)
	sizer_5.Add((20, 20), 1, 0, 0)
	sizer_5.Add(self.button_1, 0, 0, 0)
	sizer_5.Add((20, 20), 1, 0, 0)
	sizer_5.Add(self.button_2, 0, 0, 0)
	sizer_5.Add((20, 20), 1, 0, 0)
	sizer_4.Add(sizer_5, 0, wx.EXPAND, 0)
	sizer_4.Add((20, 20), 0, 0, 0)
	sizer_4.Add(self.static_line_2, 0, wx.EXPAND, 0)
	sizer_4.Add((20, 20), 0, 0, 0)
	sizer_7.Add(self.checkbox_1, 0, 0, 0)
	sizer_7.Add((20, 10), 0, 0, 0)
	sizer_7.Add(self.checkbox_3, 0, 0, 0)
	sizer_6.Add(sizer_7, 0, wx.EXPAND, 0)
	sizer_6.Add((20, 20), 1, 0, 0)
	sizer_8.Add(self.checkbox_4, 0, 0, 0)
	sizer_8.Add((20, 10), 0, 0, 0)
	sizer_8.Add(self.checkbox_6, 0, 0, 0)
	sizer_6.Add(sizer_8, 1, wx.EXPAND, 0)
	sizer_6.Add((20, 20), 1, 0, 0)
	sizer_9.Add(self.checkbox_7, 0, 0, 0)
	sizer_9.Add((20, 10), 0, 0, 0)
	sizer_9.Add(self.checkbox_8, 0, 0, 0)
	sizer_6.Add(sizer_9, 1, wx.EXPAND, 0)
	sizer_4.Add(sizer_6, 1, wx.EXPAND, 0)
	sizer_10.Add((20, 20), 0, 0, 0)
	sizer_11.Add(self.button_3, 0, 0, 0)
	sizer_11.Add((20, 20), 1, 0, 0)
	sizer_11.Add(self.button_4, 0, 0, 0)
	sizer_10.Add(sizer_11, 0, wx.EXPAND, 0)
	sizer_4.Add(sizer_10, 0, wx.EXPAND, 0)
	sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
	sizer_3.Add((20, 20), 0, 0, 0)
	sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
	sizer_2.Add((20, 20), 0, 0, 0)
	sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
	self.SetAutoLayout(True)
	self.SetSizer(sizer_1)
	sizer_1.Fit(self)
	sizer_1.SetSizeHints(self)
	self.Layout()
	# end wxGlade

    def validar(self,consulta):
	p="/var/lib/squidguard/db/"
	file=open("/etc/acept/watcherCat/asocia_contenidos",'r')
	f=file.readlines()
	file.close()
	existe=False
	for i in f:
		a=i.split(':')
		n=a[0]
		if n==consulta:
			if len(a)>1:
				for j in a[1].split():
					existe=existe+isfile(p+j+'/urls')+isfile(p+j+"/urls.db")
					existe=existe+isfile(p+j+'/domains')+isfile(p+j+"/domains.db")
	return existe

    def todos(self,event):
	if self.checkbox_1.IsEnabled():
		self.checkbox_1.SetValue(1)
	if self.checkbox_3.IsEnabled():
		self.checkbox_3.SetValue(1)
	if self.checkbox_4.IsEnabled():
		self.checkbox_4.SetValue(1)
	if self.checkbox_6.IsEnabled():
		self.checkbox_6.SetValue(1)
	if self.checkbox_7.IsEnabled():
		self.checkbox_7.SetValue(1)
	if self.checkbox_8.IsEnabled():
		self.checkbox_8.SetValue(1)

    def ninguno(self,event):
	self.checkbox_1.SetValue(0)
	self.checkbox_3.SetValue(0)
	self.checkbox_4.SetValue(0)
	self.checkbox_6.SetValue(0)
	self.checkbox_7.SetValue(0)
	self.checkbox_8.SetValue(0)

    def cierra(self,event):
	from os import system
	self.inicio=self.bisabuelo.GetParent()
	self.inicio.Show()
	self.bisabuelo.Destroy()

    def siguiente(self,event):
	self.Hide()
	asistente5=MyWizard4(self, -1, "")
	asistente5.Show()
	
    def anterior(self,event):
	self.padre.Show()
	self.Destroy()

# end of class MyWizard3

# Resumen de la configuracion, si se acepta, se aplica
class MyWizard4(wx.Frame):
    def __init__(self, *args, **kwds):
	# begin wxGlade: MyWizard4.__init__
	try:
		kwds["style"] = wx.SYSTEM_MENU|wx.FRAME_FLOAT_ON_PARENT| wx.MINIMIZE_BOX | wx.CLOSE_BOX 
	except:
		kwds["style"] = wx.SYSTEM_MENU|wx.FRAME_FLOAT_ON_PARENT| wx.MINIMIZE_BOX 
	wx.Frame.__init__(self, *args, **kwds)
	self.label_1 = wx.StaticText(self, -1, _("Resumen"))
	self.list_ctrl_1 = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER|wx.LC_NO_HEADER|wx.LC_HRULES|wx.LC_VRULES)

	self.button_1 = wx.lib.buttons.GenBitmapTextButton(self, -1, wx.Bitmap("/usr/share/acept/pixmaps/stock_ok.png", wx.BITMAP_TYPE_ANY),label=_("Aceptar")+" ")
	self.button_2 = wx.lib.buttons.GenBitmapTextButton(self, -1, wx.Bitmap("/usr/share/acept/pixmaps/stock_stop.png", wx.BITMAP_TYPE_ANY),label=_("Cancelar")+" ")

	self.filtros=self.GetParent()
	self.inet=self.filtros.GetParent()
	self.uso=self.inet.GetParent()
	self.usuario=self.uso.GetParent()
	self.inicio=self.usuario.GetParent()

	self.datos={}
	self.msg=''
	self.rellena_datos()

	self.__set_properties()
	self.__do_layout()

	self.rellena_lst()
	col=self.list_ctrl_1.GetColumnWidth(0)
	col=col+self.list_ctrl_1.GetColumnWidth(1)
	col=col-180
	tam_lst=self.list_ctrl_1.GetSize()
	tam=self.GetSize()
	self.SetSize((tam[0]+col,tam[1]+tam_lst[1]+50))

	if len(self.permitido[0])==0:
		msg_dlg=_(" La configuracion construida no es valida")+"\n "+_("El usuario no tendria acceso al sistema.")
		dlg=wx.MessageDialog(self, msg_dlg, _('Aviso ACEPT'), wx.OK | wx.ICON_HAND)
		_icon = wx.EmptyIcon()
		_icon.CopyFromBitmap(wx.Bitmap("/usr/share/acept/pixmaps/aviso.png",wx.BITMAP_TYPE_ANY))
		dlg.SetIcon(_icon)
		dlg.ShowModal()
		dlg.Destroy() 
		self.cierra(self)
	elif len(self.msg)>0:
		if len(self.msg)==1:
			cad_msg='el '+self.msg[0]
			fin_dlg=_("Este dia el acceso quedaria inhabilitado.")
		else:
			cad_msg=""
			for i in range(len(self.msg)-1):
				cad_msg=cad_msg+self.msg[i]+' '	
			cad_msg=cad_msg+'y '+self.msg[len(self.msg)-1]
			fin_dlg=_("Estos dias el acceso quedaria inhabilitado.")
		msg_dlg=_(" El horario seleccionado para")+" "+cad_msg+" "+_("no es valido")+"\n "+fin_dlg
		dlg=wx.MessageDialog(self, msg_dlg, _('Aviso ACEPT'), wx.OK | wx.ICON_HAND)
		_icon = wx.EmptyIcon()
		_icon.CopyFromBitmap(wx.Bitmap("/usr/share/acept/pixmaps/aviso.png",wx.BITMAP_TYPE_ANY))
		dlg.SetIcon(_icon)
		dlg.ShowModal()
		dlg.Destroy() 

	wx.EVT_CLOSE(self,self.cierra)
	wx.EVT_BUTTON(self,self.button_1.GetId(),self.acepta)
	wx.EVT_BUTTON(self,self.button_2.GetId(),self.cierra)
	# end wxGlade

    def __set_properties(self):
	# begin wxGlade: MyWizard4.__set_properties
	self.SetTitle(_("Asistente 5/5"))
	_icon = wx.EmptyIcon()
	_icon.CopyFromBitmap(wx.Bitmap("/usr/share/acept/pixmaps/fondo_junta.gif", wx.BITMAP_TYPE_ANY))
	self.SetIcon(_icon)
	self.label_1.SetFont(wx.Font(18, wx.DEFAULT, wx.BOLD, wx.NORMAL, False,""))
	self.list_ctrl_1.InsertColumn(0, _("Datos"))
	self.list_ctrl_1.InsertColumn(1, _("Valores"), wx.LIST_FORMAT_LEFT)
	self.SetAutoLayout(True)
	# end wxGlade

    def __do_layout(self):
	# begin wxGlade: MyWizard4.__do_layout
	sizer_1 = wx.BoxSizer(wx.VERTICAL)
	sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_3 = wx.BoxSizer(wx.VERTICAL)
	sizer_4 = wx.BoxSizer(wx.VERTICAL)
	sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
	sizer_2.Add((20, 20), 0, 0, 0)
	sizer_3.Add((20, 20), 0, 0, 0)
	sizer_4.Add(self.label_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
	sizer_4.Add((20, 20), 0, 0, 0)
	sizer_4.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
	sizer_4.Add((20, 20), 0, 0, 0)
	sizer_5.Add(self.button_1, 0, 0, 0)
	sizer_5.Add((20, 20), 1, 0, 0)
	sizer_5.Add(self.button_2, 0, 0, 0)
	sizer_4.Add(sizer_5, 0, wx.EXPAND, 0)
	sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
	sizer_3.Add((20, 20), 0, 0, 0)
	sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
	sizer_2.Add((20, 20), 0, 0, 0)
	sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
	self.SetSizer(sizer_1)
	sizer_1.Fit(self)
	sizer_1.SetSizeHints(self)
	self.Layout()
	# end wxGlade

    def cierra(self,event):
	from os import system
	self.inicio.Show()
	self.usuario.Destroy()

    def rellena_lst(self):
	items=self.datos.items()
	for key,data in items:
		index=self.list_ctrl_1.InsertStringItem(0,data[0])
		self.list_ctrl_1.SetStringItem(index,0,data[0])
		self.list_ctrl_1.SetStringItem(index,1,data[1])
		self.list_ctrl_1.SetItemData(index,key)
		
	self.list_ctrl_1.SetColumnWidth(0,wx.LIST_AUTOSIZE)
	self.list_ctrl_1.SetColumnWidth(1,wx.LIST_AUTOSIZE)
	self.list_ctrl_1.currentItem=0

    def rellena_datos (self) :
	def formato_hora(horas,minutos):
		horas=str(horas)
		minutos=str(minutos)
		if len(horas)==1:
			horas="0"+horas
		if len(minutos)==1:
			minutos="0"+minutos
		return horas+":"+minutos
	self.nombre_usuario=self.usuario.combo_box_1.GetValue()
	dias=[]
	inicios=[]
	fines=[]
	self.msg=[]
	if self.uso.checkbox_1.IsChecked():
		i1=self.uso.spin_ctrl_1.GetValue()
		i2=self.uso.spin_ctrl_2.GetValue()
		f1=self.uso.spin_ctrl_3.GetValue()
		f2=self.uso.spin_ctrl_4.GetValue()
		if (i1>f1) or (i1==f1 and i2>=f2):
			self.msg.append("Lunes")
		else:
			inicio=formato_hora(self.uso.spin_ctrl_1.GetValue(),self.uso.spin_ctrl_2.GetValue())
			fin=formato_hora(self.uso.spin_ctrl_3.GetValue(),self.uso.spin_ctrl_4.GetValue())
			dias.append("\t"+_("Lunes"))
			inicios.append(inicio)
			fines.append(fin)
	if self.uso.checkbox_1_copy.IsChecked():
		i1=self.uso.spin_ctrl_1_copy.GetValue()
		i2=self.uso.spin_ctrl_2_copy.GetValue()
		f1=self.uso.spin_ctrl_3_copy.GetValue()
		f2=self.uso.spin_ctrl_4_copy.GetValue()
		if (i1>f1) or (i1==f1 and i2>=f2):
			self.msg.append("Martes")
		else:
			inicio=formato_hora(self.uso.spin_ctrl_1_copy.GetValue(),self.uso.spin_ctrl_2_copy.GetValue())
			fin=formato_hora(self.uso.spin_ctrl_3_copy.GetValue(),self.uso.spin_ctrl_4_copy.GetValue())
			dias.append("\t"+_("Martes"))
			inicios.append(inicio)
			fines.append(fin)
	if self.uso.checkbox_1_copy_1.IsChecked():
		i1=self.uso.spin_ctrl_1_copy_1.GetValue()
		i2=self.uso.spin_ctrl_2_copy_1.GetValue()
		f1=self.uso.spin_ctrl_3_copy_1.GetValue()
		f2=self.uso.spin_ctrl_4_copy_1.GetValue()
		if (i1>f1) or (i1==f1 and i2>=f2):
			self.msg.append("Miercoles")
		else:
			inicio=formato_hora(self.uso.spin_ctrl_1_copy_1.GetValue(),self.uso.spin_ctrl_2_copy_1.GetValue())
			fin=formato_hora(self.uso.spin_ctrl_3_copy_1.GetValue(),self.uso.spin_ctrl_4_copy_1.GetValue())
			dias.append("\t"+_("Miercoles"))
			inicios.append(inicio)
			fines.append(fin)
	if self.uso.checkbox_1_copy_2.IsChecked():
		i1=self.uso.spin_ctrl_1_copy_2.GetValue()
		i2=self.uso.spin_ctrl_2_copy_2.GetValue()
		f1=self.uso.spin_ctrl_3_copy_2.GetValue()
		f2=self.uso.spin_ctrl_4_copy_2.GetValue()
		if (i1>f1) or (i1==f1 and i2>=f2):
			self.msg.append("Jueves")
		else:
			inicio=formato_hora(self.uso.spin_ctrl_1_copy_2.GetValue(),self.uso.spin_ctrl_2_copy_2.GetValue())
			fin=formato_hora(self.uso.spin_ctrl_3_copy_2.GetValue(),self.uso.spin_ctrl_4_copy_2.GetValue())
			dias.append("\t"+_("Jueves"))
			inicios.append(inicio)
			fines.append(fin)
	if self.uso.checkbox_1_copy_3.IsChecked():
		i1=self.uso.spin_ctrl_1_copy_3.GetValue()
		i2=self.uso.spin_ctrl_2_copy_3.GetValue()
		f1=self.uso.spin_ctrl_3_copy_3.GetValue()
		f2=self.uso.spin_ctrl_4_copy_3.GetValue()
		if (i1>f1) or (i1==f1 and i2>=f2):
			self.msg.append("Viernes")
		else:
			inicio=formato_hora(self.uso.spin_ctrl_1_copy_3.GetValue(),self.uso.spin_ctrl_2_copy_3.GetValue())
			fin=formato_hora(self.uso.spin_ctrl_3_copy_3.GetValue(),self.uso.spin_ctrl_4_copy_3.GetValue())
			dias.append("\t"+_("Viernes"))
			inicios.append(inicio)
			fines.append(fin)
	if self.uso.checkbox_1_copy_4.IsChecked():
		i1=self.uso.spin_ctrl_1_copy_4.GetValue()
		i2=self.uso.spin_ctrl_2_copy_4.GetValue()
		f1=self.uso.spin_ctrl_3_copy_4.GetValue()
		f2=self.uso.spin_ctrl_4_copy_4.GetValue()
		if (i1>f1) or (i1==f1 and i2>=f2):
			self.msg.append("Sabado")
		else:
			inicio=formato_hora(self.uso.spin_ctrl_1_copy_4.GetValue(),self.uso.spin_ctrl_2_copy_4.GetValue())
			fin=formato_hora(self.uso.spin_ctrl_3_copy_4.GetValue(),self.uso.spin_ctrl_4_copy_4.GetValue())
			dias.append("\t"+_("Sabado"))
			inicios.append(inicio)
			fines.append(fin)
	if self.uso.checkbox_1_copy_5.IsChecked():
		i1=self.uso.spin_ctrl_1_copy_5.GetValue()
		i2=self.uso.spin_ctrl_2_copy_5.GetValue()
		f1=self.uso.spin_ctrl_3_copy_5.GetValue()
		f2=self.uso.spin_ctrl_4_copy_5.GetValue()
		if (i1>f1) or (i1==f1 and i2>=f2):
			self.msg.append("Domingo")
		else:
			inicio=formato_hora(self.uso.spin_ctrl_1_copy_5.GetValue(),self.uso.spin_ctrl_2_copy_5.GetValue())
			fin=formato_hora(self.uso.spin_ctrl_3_copy_5.GetValue(),self.uso.spin_ctrl_4_copy_5.GetValue())
			dias.append("\t"+_("Domingo"))
			inicios.append(inicio)
			fines.append(fin)

	if self.inet.panel_1.IsEnabled():
		tdh=self.inet.spin_ctrl_1.GetValue()
		tdm=self.inet.spin_ctrl_2.GetValue()
		if tdh==24 and tdm>0:
			tdm=0
		tsh=self.inet.spin_ctrl_3.GetValue()
		tsm=self.inet.spin_ctrl_4.GetValue()
		if tsh==168 and tsm>0:
			tsm=0
		tmh=self.inet.spin_ctrl_5.GetValue()
		tmm=self.inet.spin_ctrl_6.GetValue()
		if tmh==744 and tmm>0:
			tmm=0
		self.td=str(tdh)+"h"+" "+str(tdm)+"m"+" "
		self.ts=str(tsh)+"h"+" "+str(tsm)+"m"+" "
		self.tm=str(tmh)+"h"+" "+str(tmm)+"m"+" "
		self.horarios_inet=_("Total diario")+" -->"+" "+self.td+" "+_("Total semanal")+" -->"+" "+self.ts+" "+_("Total mensual")+" -->"+" "+self.tm
		
	else:
		self.horarios_inet=self.inet.choice_1.GetStringSelection()

	self.lista_contenidos=""
	self.lista_conteni2=""
	if self.filtros.checkbox_1.GetValue():
		self.lista_contenidos=self.lista_contenidos+" "+_("Violentos")+","
		self.lista_conteni2=self.lista_conteni2+" "+"Violentos"+","
	if self.filtros.checkbox_3.GetValue():
		self.lista_contenidos=self.lista_contenidos+" "+_("Sexuales")+","
		self.lista_conteni2=self.lista_conteni2+" "+"Sexuales"+","
	if self.filtros.checkbox_4.GetValue():
		self.lista_contenidos=self.lista_contenidos+" "+_("Drogas")+","
		self.lista_conteni2=self.lista_conteni2+" "+"Drogas"+","
	if self.filtros.checkbox_6.GetValue():
		self.lista_contenidos=self.lista_contenidos+" "+_("Correo-web")+","
		self.lista_conteni2=self.lista_conteni2+" "+"Correo-web"+","
	if self.filtros.checkbox_7.GetValue():
		self.lista_contenidos=self.lista_contenidos+" "+_("Apuestas")+","
		self.lista_conteni2=self.lista_conteni2+" "+"Apuestas"+","
	if self.filtros.checkbox_8.GetValue():
		self.lista_contenidos=self.lista_contenidos+" "+_("Hacking")+","
		self.lista_conteni2=self.lista_conteni2+" "+"Hacking"+","

	self.datos[0]=(_("Contenidos Filtrados"),self.lista_contenidos)
	self.datos[1]=(_("Limites temporales al uso de internet")+" : ",self.horarios_inet)
	self.datos[10]=(_("Usuario")+" : ",self.nombre_usuario)
	self.datos[9]=(_("Uso del ordenador : "),"")

	items=8-len(dias)
	index=0
	for i in range(8,items,-1):
		self.datos[i]=(dias[index]+" :",_("de")+" "+inicios[index]+" "+_("a")+" "+fines[index])
		index=index+1
	self.permitido=[dias,inicios,fines]

    def acepta(self,event):
	import os, os.path
	from inicSquid import inic_direct_user, inic_squid_user, inic_sarg_user, apply_conf_squidguard_user 
	from watcherSquid import establece_permisos

	def inserta_datos(self,modo):
		if modo=="w":
			escribe_log('Se crea archivo de configuracion',archivo.aceptlog)
			f=open(archivo.configuracion,"w")
			f.write("<?xml version=\"1.0\" ?>\n")
			f.write("<config>\n\t")
			f.write("<demonio>\n\t\t")
			f.write("<fecha>01 01 01 2000</fecha>\n\t")
			f.write("</demonio>\n\t")
			f.write("<servicios>\n\t</servicios>\n\t")
			f.write("<usuarios>\n\t</usuarios>")
			f.write("</config>")
			f.close()
		
		xmldoc=parse_file(archivo.configuracion)
		
		if xmldoc==-1:
			escribe_log("Error en escritura de configuracion de asistente",archivo.aceptlog)
			return
		###############################
		pam_conf=""
		tmp=""
		items=len(self.permitido[0])
		for i in range(items):
			if self.permitido[0][i]=="\t"+_("Lunes"):
				self.permitido[0][i]="Mo"
			elif self.permitido[0][i]=="\t"+_("Martes"):
				self.permitido[0][i]="Tu"
			elif self.permitido[0][i]=="\t"+_("Miercoles"):
				self.permitido[0][i]="We"
			elif self.permitido[0][i]=="\t"+_("Jueves"):
				self.permitido[0][i]="Th"
			elif self.permitido[0][i]=="\t"+_("Viernes"):
				self.permitido[0][i]="Fr"
			elif self.permitido[0][i]=="\t"+_("Sabado"):
				self.permitido[0][i]="Sa"
			elif self.permitido[0][i]=="\t"+_("Domingo"):
				self.permitido[0][i]="Su"

			tmp=tmp+self.permitido[0][i]+self.permitido[1][i]+"-"+self.permitido[2][i]

		for i in tmp.split(":"):
			pam_conf=pam_conf+i
		###########################################
		s=xmldoc.getElementsByTagName("servicios")
		serv=[]
		for i in s[0].childNodes:
			name=i.localName
			if name:
				serv.append(str(name))
		if self.horarios_inet==_("No, me basta con las restricciones al uso del ordenador."):
			todo=True
		else :
			todo=False
			tdh=str(self.td).split(" ")[0].split("h")[0]
			if len(tdh)==1:
				tdh="0"+tdh
			tdm=str(self.td).split(" ")[1].split("m")[0]
			if len(tdm)==1:
				tdm="0"+tdm
			td=tdh+":"+tdm+":"+"00"
		
			tsh=str(self.ts).split(" ")[0].split("h")[0]
			if len(tsh)==1:
				tsh="0"+tsh
			tsm=str(self.ts).split(" ")[1].split("m")[0]
			if len(tsm)==1:
				tsm="0"+tsm
			ts=tsh+":"+tsm+":"+"00"
			
			tmh=str(self.tm).split(" ")[0].split("h")[0]
			if len(tmh)==1:
				tmh="0"+tmh
			tmm=str(self.tm).split(" ")[1].split("m")[0]
			if len(tmm)==1:
				tmm="0"+tmm
			tm=tmh+":"+tmm+":"+"00"

		nodo=xmldoc.getElementsByTagName('usuarios')	
		encontrado=False
		for usr in nodo[0].childNodes:
			if usr.nodeName.find(self.nombre_usuario)!=-1 and self.nombre_usuario.find(usr.nodeName)!=-1:
				encontrado=True
				break

		if not encontrado:
			nodo[0].appendChild(xmldoc.createTextNode("\n\t\t"))
			usu=xmldoc.createElement(self.nombre_usuario)
			usu.appendChild(xmldoc.createTextNode("\n\t\t"))
			nodo[0].appendChild(usu)
			nodo[0].appendChild(xmldoc.createTextNode("\n\t"))
			for usr in nodo[0].childNodes:
			    if usr.nodeName.find(self.nombre_usuario)!=-1 and self.nombre_usuario.find(usr.nodeName)!=-1:
				break

		usr.setAttribute("acceso",pam_conf)

			#Borra todo
			
		while usr.childNodes:
			for i in usr.childNodes:
				usr.removeChild(i)
			
		if todo:
			usr.appendChild(xmldoc.createTextNode("\n\t\t\t"))
			tod=xmldoc.createElement("todo")
			tod.appendChild(xmldoc.createTextNode("\n\t\t\t\t"))
			act=xmldoc.createElement("activo")
			act.appendChild(xmldoc.createTextNode("1"))
			tod.appendChild(act)
			tod.appendChild(xmldoc.createTextNode("\n\t\t\t"))
			usr.appendChild(tod)
			usr.appendChild(xmldoc.createTextNode("\n\t\t"))
		else:
			for i in serv:
				if i=="dns":
					
					usr.appendChild(xmldoc.createTextNode("\n\t\t\t"))
					tmp_srv=xmldoc.createElement(i)
					tmp_srv.appendChild(xmldoc.createTextNode("\n\t\t\t\t"))
					tmp_ac=xmldoc.createElement("activo")
					tmp_ac.appendChild(xmldoc.createTextNode("1"))
					tmp_srv.appendChild(tmp_ac)
					tmp_srv.appendChild(xmldoc.createTextNode("\n\t\t\t"))
					usr.appendChild(tmp_srv)
					usr.appendChild(xmldoc.createTextNode("\n\t\t"))
				else:
					usr.appendChild(xmldoc.createTextNode("\n\t\t\t"))
					tmp_srv=xmldoc.createElement(i)
					tmp_srv.appendChild(xmldoc.createTextNode("\n\t\t\t\t"))
					tmp_ld=xmldoc.createElement("limite_diario")
					tmp_ld.appendChild(xmldoc.createTextNode(td))
					tmp_srv.appendChild(tmp_ld)
					tmp_srv.appendChild(xmldoc.createTextNode("\n\t\t\t\t"))
					tmp_ls=xmldoc.createElement("limite_semanal")
					tmp_ls.appendChild(xmldoc.createTextNode(ts))
					tmp_srv.appendChild(tmp_ls)
					tmp_srv.appendChild(xmldoc.createTextNode("\n\t\t\t\t"))
					tmp_lm=xmldoc.createElement("limite_mensual")
					tmp_lm.appendChild(xmldoc.createTextNode(tm))
					tmp_srv.appendChild(tmp_lm)
					tmp_srv.appendChild(xmldoc.createTextNode("\n\t\t\t\t"))
					tmp_td=xmldoc.createElement("total_diario")
					tmp_td.appendChild(xmldoc.createTextNode("00:00:00"))
					tmp_srv.appendChild(tmp_td)
					tmp_srv.appendChild(xmldoc.createTextNode("\n\t\t\t\t"))
					tmp_ts=xmldoc.createElement("total_semanal")
					tmp_ts.appendChild(xmldoc.createTextNode("00:00:00"))
					tmp_srv.appendChild(tmp_ts)
					tmp_srv.appendChild(xmldoc.createTextNode("\n\t\t\t\t"))
					tmp_tm=xmldoc.createElement("total_mensual")
					tmp_tm.appendChild(xmldoc.createTextNode("00:00:00"))
					tmp_srv.appendChild(tmp_tm)
					tmp_srv.appendChild(xmldoc.createTextNode("\n\t\t\t\t"))
					tmp_pr=xmldoc.createElement("prorroga")
					tmp_pr.appendChild(xmldoc.createTextNode("00:00:00 00/00/0000"))
					tmp_srv.appendChild(tmp_pr)
					tmp_srv.appendChild(xmldoc.createTextNode("\n\t\t\t\t"))
					tmp_ac=xmldoc.createElement("activo")
					tmp_ac.appendChild(xmldoc.createTextNode("1"))
					tmp_srv.appendChild(tmp_ac)
					tmp_srv.appendChild(xmldoc.createTextNode("\n\t\t\t"))
					usr.appendChild(tmp_srv)
					usr.appendChild(xmldoc.createTextNode("\n\t\t"))

		escribe_log('Se escriben cambios en archivo de configuracion',archivo.aceptlog)
		correcto=False
		while not correcto:
			try:
				copia_seguridad()
				f=open(archivo.configuracion,"w")
				f.write(xmldoc.toxml())
				f.close
				correcto=True
			except:
				correcto=False

	if os.path.exists("/etc/acept/watcherCat"):
		if os.path.exists(archivo.configuracion):
			inserta_datos(self,"r")
			if len(self.lista_conteni2)>0:
				inic_control_web(self.nombre_usuario, self.lista_conteni2,archivo.configuracion)
	else :
		os.mkdir("/etc/acept/watcherCat",700)
		inserta_datos(self,"w")
		if len(self.lista_conteni2)>0:
			inic_control_web(self.nombre_usuario, self.lista_conteni2,archivo.configuracion)

	escribe_log('Se aplica configuracion web de usuario en sistema',archivo.aceptlog)	
	if (control_web_user(self.nombre_usuario,archivo.aceptlog)==1):
		inic_squid_user(self.nombre_usuario,archivo.aceptlog)
		inic_sarg_user(self.nombre_usuario,archivo.aceptlog)
		apply_conf_squidguard_user(self.nombre_usuario,archivo.aceptlog)
		inic_direct_user(self.nombre_usuario,archivo.aceptlog)
	else:
		establece_permisos(archivo.configuracion)
	self.cierra(self)

# end of class MyWizard4
